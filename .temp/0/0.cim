#define SPECIAL_REG_INPUT_BIT_WIDTH 0
#define SPECIAL_REG_OUTPUT_BIT_WIDTH 1
#define SPECIAL_REG_WEIGHT_BIT_WIDTH 2
#define SPECIAL_REG_GROUP_SIZE 3
#define SPECIAL_REG_ACTIVATION_GROUP_NUM 4
#define SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM 5
#define SPECIAL_REG_GROUP_INPUT_STEP 6
#define SPECIAL_REG_GROUP_INPUT_OFFSET_ADDR 6
#define SPECIAL_REG_VALUE_SPARSE_MASK_ADDR 7
#define SPECIAL_REG_BIT_SPARSE_META_ADDR 8

#define SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH 16
#define SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH 17
#define SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH 18
#define SPECIAL_REG_SIMD_INPUT_4_BIT_WIDTH 19
#define SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH 20

#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_1 21
#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_2 22
def main(null<int8>) {
    SpecialRegSet(SPECIAL_REG_INPUT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_GROUP_SIZE, 1);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_GROUP_NUM, 1);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM, 4);
    SpecialRegSet(SPECIAL_REG_GROUP_INPUT_STEP, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);
    I_aligned_0_4 = Buffer(<16>, int8, __PIM_INPUT_REG_BUFFER__);
    W_aligned_0 = Buffer(<1,16,1,1,4>, int8, __MACRO__);
    O_aligned_0_4 = Buffer(<4>, int8, __PIM_OUTPUT_REG_BUFFER__);
    I_aligned = Buffer(<28,28,16,1>, int8, __GLOBAL__);
    I_aligned_0 = Buffer(<28,28,16>, int8, __INPUT_MEMORY__);
    W_aligned = Buffer(<2,16,1,1,4>, int8, __GLOBAL__);
    O_aligned_0 = Buffer(<28,28,4>, int8, __OUTPUT_MEMORY__);
    O_aligned = Buffer(<28,28,4>, int8, __GLOBAL__);
    a_ = 27 + 1;
    for c1 in range(0, a_, 1) carry (null) {
        b_ = 27 + 1;
        for c2 in range(0, b_, 1) carry (null) {
            c_ = Slice(I_aligned, [c1,c2,0,0], [1,1,16,1], [1,1,1,1]);
            d_ = Slice(I_aligned_0, [c1,c2,0], [1,1,16], [1,1,1]);
            Trans(c_, d_);
        };
    };
    e_ = 15 + 1;
    for c2 in range(0, e_, 1) carry (null) {
        f_ = Slice(W_aligned, [1,c2,0,0,0], [1,1,1,1,4], [1,1,1,1,1]);
        g_ = Slice(W_aligned_0, [0,c2,0,0,0], [1,1,1,1,4], [1,1,1,1,1]);
        Trans(f_, g_);
    };
    h_ = 27 + 1;
    for c2 in range(0, h_, 1) carry (null) {
        i_ = 27 + 1;
        for c3 in range(0, i_, 1) carry (null) {
            j_ = Slice(I_aligned_0, [c2,c3,0], [1,1,16], [1,1,1]);
            k_ = Slice(I_aligned_0_4, [0], [16], [1]);
            Trans(j_, k_);
            l_ = Slice(I_aligned_0_4, [0], [16], [1]);
            m_ = Slice(W_aligned_0, [0,0,0,0,0], [1,16,1,1,4], [1,1,1,1,1]);
            CIMComputeDense(l_, m_);
            n_ = Slice(O_aligned_0_4, [0], [4], [1]);
            o_ = Slice(O_aligned_0, [c2,c3,0], [1,1,4], [1,1,1]);
            Trans(n_, o_);
        };
    };
    p_ = 27 + 1;
    for c1 in range(0, p_, 1) carry (null) {
        q_ = 27 + 1;
        for c2 in range(0, q_, 1) carry (null) {
            r_ = Slice(O_aligned_0, [c1,c2,0], [1,1,4], [1,1,1]);
            s_ = Slice(O_aligned, [c1,c2,0], [1,1,4], [1,1,1]);
            Trans(r_, s_);
        };
    };
}
