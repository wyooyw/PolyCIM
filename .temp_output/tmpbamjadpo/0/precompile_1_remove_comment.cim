#define SPECIAL_REG_INPUT_BIT_WIDTH 0
#define SPECIAL_REG_OUTPUT_BIT_WIDTH 1
#define SPECIAL_REG_WEIGHT_BIT_WIDTH 2
#define SPECIAL_REG_GROUP_SIZE 3
#define SPECIAL_REG_ACTIVATION_GROUP_NUM 4
#define SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM 5
#define SPECIAL_REG_GROUP_INPUT_STEP 6
#define SPECIAL_REG_GROUP_INPUT_OFFSET_ADDR 6
#define SPECIAL_REG_VALUE_SPARSE_MASK_ADDR 7
#define SPECIAL_REG_BIT_SPARSE_META_ADDR 8

#define SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH 16
#define SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH 17
#define SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH 18
#define SPECIAL_REG_SIMD_INPUT_4_BIT_WIDTH 19
#define SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH 20

#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_1 21
#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_2 22
def main(null<int8>) {
    SpecialRegSet(SPECIAL_REG_INPUT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_GROUP_SIZE, 8);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_GROUP_NUM, 16);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM, 64);
    SpecialRegSet(SPECIAL_REG_GROUP_INPUT_STEP, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);
    I_aligned_1 = Buffer(<2,32,16>, int8, __PIM_INPUT_REG_BUFFER__);
    W_aligned = Buffer(<1,32,16,1,64>, int8, __MACRO__);
    O = Buffer(<1,64,32,32>, int8, __GLOBAL__);
    I_aligned = Buffer(<32,2,32,16>, int8, __INPUT_MEMORY__);
    a_ = 0;
    b_ = 31;
    c_ = b_ + 1;
    for c0 in range(a_, c_, 1) carry (null) {
        d_ = 0;
        e_ = 0;
        f_ = 0;
        g_ = 0;
        h_ = 1;
        i_ = 2;
        j_ = 32;
        k_ = 16;
        l_ = Slice(I_aligned, [d_,e_,f_,g_], [h_,i_,j_,k_], [1,1,1,1]);
        m_ = 0;
        n_ = 0;
        o_ = 0;
        p_ = 2;
        q_ = 32;
        r_ = 16;
        s_ = Slice(I_aligned_1, [m_,n_,o_], [p_,q_,r_], [1,1,1]);
        Trans(l_, s_);
        t_ = 0;
        u_ = 1;
        v_ = u_ + 1;
        for c2 in range(t_, v_, 1) carry (null) {
            w_ = 0;
            x_ = 0;
            y_ = 0;
            z_ = 1;
            ab_ = 32;
            bb_ = 16;
            cb_ = Slice(I_aligned_1, [w_,x_,y_], [z_,ab_,bb_], [1,1,1]);
            db_ = 0;
            eb_ = 0;
            fb_ = 0;
            gb_ = 0;
            hb_ = 0;
            ib_ = 1;
            jb_ = 32;
            kb_ = 16;
            lb_ = 1;
            mb_ = 64;
            nb_ = Slice(W_aligned, [db_,eb_,fb_,gb_,hb_], [ib_,jb_,kb_,lb_,mb_], [1,1,1,1,1]);
            CIMComputeDense(cb_, nb_);
        };
    };
}
